#reasignacion de grupos
k=2
n=4
d1=as.matrix(dist(rbind(df,matc)))
d2=d1[1:4,5:6]
grupos=c()
for (i in 1:n){
grupos[i]=which.min(d2[i])
}
d2
#reasignacion de grupos
k=2
n=4
d1=as.matrix(dist(rbind(df,matc)))
d2=d1[1:4,5:6]
grupos=c()
for (i in 1:n){
grupos[i]=which.min(d2[i,])
}
grupos
d2
grupos
john=c(3.57,1.80,16.23,2.96)
john=c(3.57,1.80,16.23,2.96)
coname=c("vallas","saltoalto","tiro","car200")
colnames(john)=coname
john=as.matrix(john)
colnames(john)=coname
john=c(3.57,1.80,16.23,2.96)
names(john)=coname
john
john=c((3.57-2.7222)/0.2466,(1.80-1.7974)/0.0025,(16.23-13.2752)/2.0829,(2.96-2.1117)/0.7232)
john.stand=c((3.57-2.7222)/0.2466,(1.80-1.7974)/0.0025,(16.23-13.2752)/2.0829,(2.96-2.1117)/0.7232)
john.stand
john.stand=c((3.57-2.7222)/0.2466,(1.80-1.7974)/0.0025,(16.23-13.2752)/2.0829,(2.96-2.1117)/0.7232)
PCA1=c(-0.57,-0.38,-0.51,-0.51)
john.stand*PCA1
john.stand=c((3.57-2.7222)/0.2466,(1.80-1.7974)/0.0025,(16.23-13.2752)/2.0829,(2.96-2.1117)/0.7232)
PCA1=c(-0.57,-0.38,-0.51,-0.51)
john.stand*PCA1
john.stand=c((3.57-2.7222)/sqrt(0.2466),(1.80-1.7974)/sqrt(0.0025),(16.23-13.2752)/sqrt(2.0829),(2.96-2.1117)/sqrt(0.7232))
PCA1=c(-0.57,-0.38,-0.51,-0.51)
john.stand*PCA1
john.stand
john.stand=c((3.57-2.7222)/sqrt(0.2466),(1.80-1.7974)/sqrt(0.0025),(16.23-13.2752)/sqrt(2.0829),(2.96-2.1117)/sqrt(0.7232))
names(john.stand)=c("vallas","saloalto","tiro","car200")
john.stand=c((3.57-2.7222)/sqrt(0.2466),(1.80-1.7974)/sqrt(0.0025),(16.23-13.2752)/sqrt(2.0829),(2.96-2.1117)/sqrt(0.7232))
names(john.stand)=c("vallas","saloalto","tiro","car200")
john.stand
lambda=2.73
des=sqrt(lambda)
lambda=2.73
des=sqrt(lambda)
des*1
des*2
PCA1=(-0.57,-0.38,-0.51,-0.51)
PCA1=c(-0.57,-0.38,-0.51,-0.51)
PCA1=c(-0.57,-0.38,-0.51,-0.51)
sum(john.stand*PCA1)
lambda=c(2.73,0.76,0.38,0.12)
lambda=c(2.73,0.76,0.38,0.12)
100*(lambda/sum(lambda))
lambda=c(2.73,0.76,0.38,0.12)
100*(lambda/sum(lambda))
68.421053+19.047619
load("datos.Rdata")
diag(var(covid))
View(covid)
summary(diag(var(covid)))
round(summary(diag(var(covid))),5)
round(summary(diag(var(covid))),3)
round(summary(diag(var(covid))),2)
base.pais=covid[c("Austria","Bolivia","Belgium","Brazil","Chile","Colombia", "Costa Rica", "Uruguay"),]
standpais=scale(base.pais,scale = T)
d=(1-cor(t(standpais)));d=as.dist(d);d
min(d)
cs.single=hclust(d,method = "single")
plot(cs.single)
cs.comp=hclust(d,method = "complete")
plot(cs.single)
cs.av=hclust(d,method = "average")
plot(cs.av)
c.w=hclust(d,method = "ward.D")
plot(c.w)
clust=cutree(cs.single,k=2)
table(clust)
base.pais=covid[c("Austria","Bolivia","Belgium","Brazil","Chile","Colombia", "Costa Rica", "Uruguay"),]
load("datos.Rdata")
base.pais=covid[c("Austria","Bolivia","Belgium","Brazil","Chile","Colombia", "Costa Rica", "Uruguay"),]
d=(1-cor(t(base.pais)));d=as.dist(d);d
cs.single=hclust(d,method = "single")
plot(cs.single)
cs.comp=hclust(d,method = "complete")
plot(cs.single)
cs.av=hclust(d,method = "average")
plot(cs.av)
c.w=hclust(d,method = "ward.D")
plot(c.w)
clust=cutree(cs.single,k=2)
table(clust)
lambda= c(2.73,0.76,0.38,0.13)
lambda1=lambda[1]
desv1=sqrt(lambda1)
c(desv1,desv1*2,desv1*3,desv1*4)
-c(desv1,desv1*2,desv1*3,desv1*4)
desv=c(1.3352, 1.1022, 0.9034, 0.8158, 0.7216)
lambda=desv^2
plot(lambda)
(lambda[1:5]/sum(lambda))*100
35.65538+24.29703+16.32272
load("datos1.Rdata")
eB=eigen(B1)
plot(eB$vectors[,1:2]%*%diag(sqrt(eB$values[1:2])),xlab = "coordenada1",ylab = "coordenada2");
text(eB$vectors[,1:2]%*%diag(sqrt(eB$values[1:2])),labels = 1:10,pos = 4)
#Grupo inicial
grupo1=senti1$grupo
table(grupo1)
#Funcion centroid
centros=function(base,grupo){
k=length(unique(grupo))
nc=ncol(base)
matc=matrix(NA,nrow = k,ncol = nc)
for(i in 1:k){
smatc=base[grupo==i,]
matc[i,]=apply(smatc,2,mean)
}
return(matc)
}
# Funcion reasignacion grupos
grupos=function(datos,matc){
matc=as.data.frame(matc)
names(matc)=names(datos)
k=nrow(matc)
n=nrow(datos)
d1=as.matrix(dist(rbind(datos,matc)))
d2=d1[1:n,(n+1):(n+k)]
grupos=c()
for(i in 1:n){
grupos[i]=which.min(d2[i,])
}
return(grupos)
}
#base=senti1[,-6]
matc1=centros(base,grupo1)
lambda= c(2.73,0.76,0.38,0.13)
lambda1=lambda[1]
desv1=sqrt(lambda1)
c(desv1,desv1*2,desv1*3,desv1*4)
-c(desv1,desv1*2,desv1*3,desv1*4)
desv=c(1.3352, 1.1022, 0.9034, 0.8158, 0.7216)
lambda=desv^2
plot(lambda)
(lambda[1:5]/sum(lambda))*100
35.65538+24.29703+16.32272
load("datos1.Rdata")
eB=eigen(B1)
plot(eB$vectors[,1:2]%*%diag(sqrt(eB$values[1:2])),xlab = "coordenada1",ylab = "coordenada2");
text(eB$vectors[,1:2]%*%diag(sqrt(eB$values[1:2])),labels = 1:10,pos = 4)
#Grupo inicial
grupo1=senti1$grupo
table(grupo1)
#Funcion centroid
centros=function(base,grupo){
k=length(unique(grupo))
nc=ncol(base)
matc=matrix(NA,nrow = k,ncol = nc)
for(i in 1:k){
smatc=base[grupo==i,]
matc[i,]=apply(smatc,2,mean)
}
return(matc)
}
# Funcion reasignacion grupos
grupos=function(datos,matc){
matc=as.data.frame(matc)
names(matc)=names(datos)
k=nrow(matc)
n=nrow(datos)
d1=as.matrix(dist(rbind(datos,matc)))
d2=d1[1:n,(n+1):(n+k)]
grupos=c()
for(i in 1:n){
grupos[i]=which.min(d2[i,])
}
return(grupos)
}
#base=senti1[,-6]
matc1=centros(base,grupo1)
load("D:/Examen 1 - 2024/datos.Rdata")
d=(1-cor(t(scale(rubik,scale = T)))
d=(1-cor(t(scale(rubik,scale = T))))
d=as.dist(d)
d
min(d)
cs.single=hclust(d,method = "single")
plot(cs.single)
cs.com=hclust(d,method = "complete")
plot(cs.com)
cs.av=hclust(d,method = "average")
plot(cs.av)
cs.ward=hclust(d,method = "ward.D")
plot(cs.ward)
library(readxl)
Indices_IDH <- read_excel("Indices_ejemplo1.xlsx")
summary(Indices_IDH)
View(Indices_IDH)
Indices_IDH2=Indices_IDH[1,2]=NA
Indices_IDH2=Indices_IDH[1,2]
Indices_IDH2=Indices_IDH
Indices_IDH2[1,2]=NA
summary(Indices_IDH2)
View(Indices_IDH2)
Indices_IDG <- read_excel("Indices_ejemplo2.xlsx")
summary(Indices_IDG)
Gm<-(sqrt((10/Indices_IDG$Mort_materna)*(1/Indices_IDG$Adolesc))*sqrt(Indices_IDG$Reg_mujeres*Indices_IDG$Sec_mujeres)*Indices_IDG$Part_mujeres)^(1/3)
Gm
Gh<-(1*sqrt(Indices_IDG$Reg_hombres*Indices_IDG$Sec_hombres)*Indices_IDG$Part_hombres)^(1/3)
Harm<-1/((1/Gm+1/Gh)/2)
head(Harm)
S<-(sqrt((10/Indices_IDG$Mort_materna)*(1/Indices_IDG$Adolesc))+1)/2
E<-(sqrt(Indices_IDG$Reg_mujeres*Indices_IDG$Sec_mujeres)+sqrt(Indices_IDG$Reg_hombres*Indices_IDG$Sec_hombres))/2
M<-(Indices_IDG$Part_mujeres+Indices_IDG$Part_hombres)/2
Gmh<-(S*E*M)^(1/3)
IDG<-1-(Harm/Gmh)
head(IDG)
1+3
1
1
1
1
1
1
1
1
md.pattern(datos, rotate.names = T)
librerias <- c("ggplot2", "dplyr", "tidyr", "readr", "VIM", "tidyverse", "openxlsx", "factoextra", "hopkins", "mice", "ggthemes", "scales","readxl")
invisible(lapply(librerias, library, character.only = TRUE))
md.pattern(datos, rotate.names = T)
md.pattern(df, rotate.names = T)
library(readxl)
better_life <- read_excel("~/better_life.xls")
df=better_life
summary(df)
md.pattern(df, rotate.names = T)
nrow(df)
df=better_life
summary(df)
md.pattern(df, rotate.names = T)
df=better_life
summary(df)
sum(df==NA)
sum(df=NA)
sum(df[df==NA])
df[df==NA]
md.pattern(df, rotate.names = T)
str(df)
df[df==NA]
df[df==NULL]
df[df==1]
df[df=NA]
sum(df[df=NA])
summary(df)
3+4+3+6+12+7+2+6+1+2+2+2+2+2+19
sum(is.na(df))
sum(is.na(df))
3+4+3+6+12+7+2+6+1+2+2+2+2+2+19
kNN(df,variable = c(""),k=)
names(df)
df.knn=kNN(df[,-1],variable = c("tiempo_ocio"),k=4)
df.knn
summary(df.knn)
View(df.knn)
datos_completos<-df %>% filter(!is.na("tiempo_ocio"))
datos_completos<-df %>% filter(!is.na("tiempo_ocio"))
mod <- lm(datos_completos$tiempo_ocio ~ datos_completos$tasa_empleo + datos_completos$red_apoyo+datos_completos$contaminacion+datos_completos$calidad_agua+datos_completos$intencion_voto+datos_completos$esperanza_vida+datos_completos$satisfaccion_vida+datos_completos$seguridad_caminar+datos_completos$tasa_homididio)
datos_completos<-df %>% filter(!is.na("tiempo_ocio"))
mod <- lm(datos_completos$tiempo_ocio ~ datos_completos$tasa_empleo + datos_completos$red_apoyo+datos_completos$contaminacion+datos_completos$calidad_agua+datos_completos$intencion_voto+datos_completos$esperanza_vida+datos_completos$satisfaccion_vida+datos_completos$seguridad_caminar+datos_completos$tasa_homididio)
step(mod)
#Programamos una funcion para estimar los valores
lm=lm(datos_completos$tiempo_ocio~datos_completos$calidad_agua+datos_completos$intencion_voto+datos_completos$satisfaccion_vida+datos_completos$seguridad_caminar)
pred1  <- function(x){
resp <-  mod$coefficients[1] +  mod$coefficients[2]*x[, 1] +  mod$coefficients[3]*x[, 2]+mod$coefficients[4]*x[, 3]+mod$coefficients[5]*x[, 4]
return(resp)
}
faltantes<-which(is.na(df$tiempo_ocio))
#Se hace la estimacion
df[faltantes,"tiempo_ocio"] <- pred1(df[faltantes,c("calidad_agua,intencion_voto,satisfaccion_vida,seguridad_caminar")])
#Programamos una funcion para estimar los valores
lm=lm(datos_completos$tiempo_ocio~datos_completos$calidad_agua+datos_completos$intencion_voto+datos_completos$satisfaccion_vida+datos_completos$seguridad_caminar)
pred1  <- function(x){
resp <-  mod$coefficients[1] +  mod$coefficients[2]*x[, 1] +  mod$coefficients[3]*x[, 2]+mod$coefficients[4]*x[, 3]+mod$coefficients[5]*x[, 4]
return(resp)
}
faltantes<-which(is.na(df$tiempo_ocio))
#Se hace la estimacion
df[faltantes,"tiempo_ocio"] <- pred1(df[faltantes,c("calidad_agua,intencion_voto,satisfaccion_vida,seguridad_caminar")])
#Se hace la estimacion
df[faltantes,"tiempo_ocio"] <- pred1(df[faltantes,c("calidad_agua","intencion_voto","satisfaccion_vida","seguridad_caminar")])
df
names(df.knn)
View(df.knn)
df.knh.im=df.knn=kNN(df.knn[,-25],m=10,seed=53)
df.knh.im=kNN(df.knn[,-25],m=10,seed=53)
df.knh.im=kNN(df.knn[,-25],m=10,seed=53)
```{r}
df.knh.im = mice(df.knn[,-25], m = 10, seed = 53)
better_life_imp_base<-complete(df.knh.im)
View(better_life)
View(better_life_imp_base)
df.stand=scale(better_life_imp_base,scale = T)
df.stand
df.stand=as.data.frame(scale(better_life_imp_base,scale = T))
base.zscore <-  as.data.frame(scale(better_life_imp_base, center = TRUE, scale = TRUE))
summary(df.stand)
summary(base.zscore)
df.stand=as.data.frame(scale(better_life_imp_base,scale = T))
base.zscore <-  as.data.frame(scale(better_life_imp_base, center = TRUE, scale = TRUE))
summary(df.stand)
summary(base.zscore)
summary(df.stand)
summary(base.zscore)
summary(df.stand)
summary(base.zscore)
summary(df.stand)
summary(base.zscore)
summary(df.stand)
summary(base.zscore)
1/nrow(df)
1/nrow(df.stand)
nrow(df)
ncol(df)
ncol(base.zscore)
1/24
pesos.ex1=rep(0.04166667,24)
df.stand
pesos.ex1
1/22
(1/24)-0.05
(1/24)-0.1
(1/24)
0.9/22
pesos.ex2=c(rep(0.04090909,22),0.05,0.05)
df.stand
pesos.ex2
expertos <- function(pesos_expertos) {
pesos_promedio <- colMeans(pesos_expertos)
return(pesos_promedio)
}
pesos.ex1=rep(0.04166667,24)
pesos.ex2=c(rep(0.04090909,22),0.05,0.05)
pesos=expertos(rbind(pesos.ex1,pesos.ex2))
pesos
sum(pesos)
mediapond = function(base, pesos) {
if (ncol(base) != length(pesos)) {
stop("El número de columnas en los datos no coincide con la longitud del vector de pesos.")
}
media_ponderada = rowSums(base * pesos)
base = cbind(base, media_ponderada)
return(base)
}
ind.fina=mediapond(df.stand,pesos)
ind.fina
summary
summary(ind.fina)
summary(ind.fina$media_ponderada)
nrow(df)
df.final=cbind(df,ind.fina$media_ponderada)
View(df.final)
load("~/better_life.xls")
library(readxl)
better_life <- read_excel("better_life.xls")
View(better_life)
librerias <- c("ggplot2", "dplyr", "tidyr", "readr", "VIM", "tidyverse", "openxlsx", "factoextra", "hopkins", "mice", "ggthemes", "scales","readxl")
invisible(lapply(librerias, library, character.only = TRUE))
library(readxl)
better_life <- read_excel("better_life.xls")
df=better_life
md.pattern(df, rotate.names = T)
sum(is.na(df))
summary(df)
sumar=summary(df)
names(sumar)
summary(df)
kNN(df,variable = c("tiempo_ocio"),k=2)
df.knn=kNN(df,variable = c("tiempo_ocio"),k=2)
summary(df.knn)
View(df.knn)
df2=df.knn[,-c(1,26)]
View(df2)
imp = mice(df2, m = 10, seed = 53)
df2
imp = mice(df2, m = 10, seed = 53)
df.imp=complete(imp)
df2
df.knn=kNN(df,variable = c("tiempo_ocio"),k=2)
summary(df.knn)
df2=df.knn[,-c(1,26)]
df2
df.knn
df2=df.knn[,-c(1,26)]
df2=df.knn[,-c(1,26)]
imp = mice(df2, m = 10, seed = 53)
df.imp=complete(imp)
imp = mice(df.knn[,-c(1,26)], m = 10, seed = 53)
imp = mice(df.knn[,-c(26)], m = 10, seed = 53)
df.knn=kNN(df,variable = c("tiempo_ocio"),k=4)
summary(df.knn)
df2=df.knn[,-c(1,26)]
imp = mice(df2, m = 10, seed = 53)
df.knn=kNN(df,variable = c("tiempo_ocio"),k=4)
summary(df.knn)
df2=df.knn[,-c(1,26)]
imp = mice(df2, m = 10, seed = 53)
df.knn=kNN(df[,-1],variable = c("tiempo_ocio"),k=4)
summary(df.knn)
df2=df.knn[,-c(26)]
imp = mice(df2, m = 10, seed = 53)
df2
df2=df.knn[,-c(26)]
df2
df2=df.knn[,-c(25)]
df2
df2=df.knn[,-c(25)]
imp = mice(df2, m = 10, seed = 53)
df.imp=complete(imp)
df.imp
summary(df.imp)
df.estand=scale(df.imp,scale = T)
apply(df.estand,2,mean)
apply(df.estand,2,var)
robust_scalar<- function(x){(x- median(x)) /(quantile(x,probs = .75)-quantile(x,probs = .25))}
base.robust <- as.data.frame(lapply(df.imp, robust_scalar))
summary(base.robust)
summary(df.estand)
df.estand=as.data.frame(scale(df.imp,scale = T))
summary(df.estand)
hist(df.estand$Gasto_hogar)
ncol(df.estand)
n=ncol(df.estand)
exp.1=rep(1/n,n)
exp.1
exp.2=c(rep(0.9/n,22),0.05,0.05)
exp.2
exp.2=c(rep(0.9/22,22),0.05,0.05)
exp.2
sum(exp.1)
sum(exp.2)
expertos <- function(pesos_expertos) {
pesos_promedio <- colMeans(pesos_expertos)
return(pesos_promedio)
}
pesos=expertos(rbind(exp.1,exp.2))
pesos
sum(pesos)
mediapond = function(base, pesos) {
if (ncol(base) != length(pesos)) {
stop("El número de columnas en los datos no coincide con la longitud del vector de pesos.")
}
media_ponderada = rowSums(base * pesos)
base = cbind(base, media_ponderada)
return(base)
}
mediapond(df.estand,pesos)
df.final1=mediapond(df.estand,pesos)
df.final1
df.final2=as.data.frame(better_life[,1],df.final1)
df.final2
df.final2=as.data.frame(cbind(better_life[,1],df.final1))
df.final2
which.max(df.final2$media_ponderada)
summary(df.final2$media_ponderada)
View(df.final2)
head(df.final2,n = 3)
head(df.final2,n = 3,sort(df.final2$media_ponderada))
#Con pca
pca1=prcomp(df.estand)
summary(pca1)
pca1$rotation
summary(pca1)
pca1$rotation
pca1$rotation[,1]
pesos2=pca1$rotation[,1]/sum(abs(pca1$rotation[,1]))
sum(pesos2)
pesos2=abs(pca1$rotation[,1])/sum(abs(pca1$rotation[,1]))
sum(pesos2)
mediapond = function(base, pesos) {
if (ncol(base) != length(pesos)) {
stop("El número de columnas en los datos no coincide con la longitud del vector de pesos.")
}
media_ponderada = rowSums(base * pesos)
base = cbind(base, media_ponderada)
return(base)
}
df.pca1=mediapond(df.estand,pesos2)
df.pca2=as.data.frame(cbind(better_life[,1],df.pca1))
summary(df.pca2$media_ponderada)
View(df.pca2)
summary(pca1)
pesos2=abs(pca1$rotation[,1:5])/sum(abs(pca1$rotation[,1:5]))
pesos2
df.estand%>%
PerformanceAnalytics::chart.Correlation()
cor(df.estand)
pesos2=abs(pca1$rotation[,1])/sum(abs(pca1$rotation[,1]))
pesos3=abs(pca1$rotation[,2])/sum(abs(pca1$rotation[,2]))
pesos6=abs(pca1$rotation[,5])/sum(abs(pca1$rotation[,5]))
pesos2=abs(pca1$rotation[,1])/sum(abs(pca1$rotation[,1]))
pesos3=abs(pca1$rotation[,2])/sum(abs(pca1$rotation[,2]))
pesos4=abs(pca1$rotation[,3])/sum(abs(pca1$rotation[,3]))
pesos5=abs(pca1$rotation[,4])/sum(abs(pca1$rotation[,4]))
pesos6=abs(pca1$rotation[,5])/sum(abs(pca1$rotation[,5]))
