MAE = "MAE",
MAPE = "MAPE"
) %>%
fmt_number(
columns = c(AR1, MA1,MA2, SMA1, SMA2, SAR1, Intercepto, Drift, AIC, BIC, ME, RMSE, MAE, MAPE),
decimals = 4
)
# Imprimir la tabla
print(model_table_nf)
auto.arima(TOTPOT.f1.ts)
auto.arima(TOTPOT.f2.ts)
auto.arima(TOTPOT.f3.ts)
auto.arima(TOTPOT.f4.ts)
auto.arima(TOTPOT.f5.ts)
library(forecast)
library(gt)
# Función para ajustar el modelo ARIMA y extraer las métricas
model_results_nf <- lapply(1:5, function(i) {
# Definir el nombre de la serie
series_name <- paste0("TOTPOT.nf", i, ".ts")
series <- tryCatch(get(series_name), error = function(e) NULL)
if (is.null(series)) {
return(data.frame(
Serie = paste0("Serie ", i, " (No Flare)"),
Model = "ARIMA",
AR1 = "*", MA1 = "*", SMA1 = "*", SMA2 = "*", SAR1 = "*", Intercepto = "*", Drift = "*",  # Columnas para los coeficientes
AIC = "*", BIC = "*",
ME = NA, RMSE = NA, MAE = NA, MAPE = NA
))
}
# Ajustar el modelo ARIMA
arima_model <- tryCatch(auto.arima(series), error = function(e) NULL)
if (is.null(arima_model)) {
return(data.frame(
Serie = paste0("Serie ", i, " (No Flare)"),
Model = "ARIMA",
AR1 = "*", MA1 = "*", SMA1 = "*", SMA2 = "*", SAR1 = "*", Intercepto = "*", Drift = "*",  # Columnas para los coeficientes
AIC = "*", BIC = "*",
ME = NA, RMSE = NA, MAE = NA, MAPE = NA
))
}
# Extraer los coeficientes del modelo ARIMA
arima_params <- coef(arima_model)
# Obtener AIC y BIC
aic_value <- AIC(arima_model)
bic_value <- BIC(arima_model)
# Extraer los coeficientes específicos (ar1, ma1, sma1, sma2, sar1, intercepto, drift)
ar1_coeff <- ifelse("ar1" %in% names(arima_params), round(arima_params["ar1"], 4), "*")
ma1_coeff <- ifelse("ma1" %in% names(arima_params), round(arima_params["ma1"], 4), "*")
sma1_coeff <- ifelse("sma1" %in% names(arima_params), round(arima_params["sma1"], 4), "*")
sma2_coeff <- ifelse("sma2" %in% names(arima_params), round(arima_params["sma2"], 4), "*")
sar1_coeff <- ifelse("sar1" %in% names(arima_params), round(arima_params["sar1"], 4), "*")
intercepto_coeff <- ifelse("intercept" %in% names(arima_params), round(arima_params["intercept"], 4), "*")
drift_coeff <- ifelse("drift" %in% names(arima_params), round(arima_params["drift"], 4), "*")
# Calcular las métricas de error
accuracy_metrics <- accuracy(arima_model)
data.frame(
Serie = paste0("Serie ", i, " (No Flare)"),
AR1 = ar1_coeff,
MA1 = ma1_coeff,
SMA1 = sma1_coeff,
SMA2 = sma2_coeff,
SAR1 = sar1_coeff,
Intercepto = intercepto_coeff,
Drift = drift_coeff,
AIC = round(aic_value, 2),
BIC = round(bic_value, 2),
ME = round(accuracy_metrics[1, "ME"], 4),
RMSE = round(accuracy_metrics[1, "RMSE"], 4),
MAE = round(accuracy_metrics[1, "MAE"], 4),
MAPE = round(accuracy_metrics[1, "MAPE"], 4)
)
})
# Combinar resultados y ordenar por modelo
model_comparison_nf <- do.call(rbind, model_results_nf)
# Reemplazar NA con "*"
model_comparison_nf[is.na(model_comparison_nf)] <- "*"
# Crear la tabla en formato APA
model_table_nf <- model_comparison_nf %>%
gt() %>%
tab_header(
title = "Comparación de Modelos ARIMA - TOTPOT (No Flare)"
) %>%
cols_label(
Serie = "Serie",
AR1 = "AR(1)",
MA1 = "MA(1)",
SMA1 = "SMA(1)",
SMA2 = "SMA(2)",
SAR1 = "SAR(1)",
Intercepto = "Intercepto",
Drift = "Drift",
AIC = "AIC",
BIC = "BIC",
ME = "Error Medio",
RMSE = "RMSE",
MAE = "MAE",
MAPE = "MAPE"
) %>%
fmt_number(
columns = c(AR1, MA1, SMA1, SMA2, SAR1, Intercepto, Drift, AIC, BIC, ME, RMSE, MAE, MAPE),
decimals = 4
)
# Imprimir la tabla
print(model_table_nf)
auto.arima(TOTPOT.nf1.ts)
auto.arima(TOTPOT.nf2.ts)
auto.arima(TOTPOT.nf3.ts)
auto.arima(TOTPOT.nf4.ts)
auto.arima(TOTPOT.nf5.ts)
library(forecast)
library(gt)
# Función para ajustar el modelo ARIMA y extraer las métricas
model_results_nf <- lapply(1:5, function(i) {
# Definir el nombre de la serie
series_name <- paste0("TOTUSJZ.f", i, ".ts")
series <- tryCatch(get(series_name), error = function(e) NULL)
if (is.null(series)) {
return(data.frame(
Serie = paste0("Serie ", i, " (Flare)"),
Model = "ARIMA",
AR1 = "*", MA1 = "*", SMA1 = "*", SMA2 = "*", SAR1 = "*", Intercepto = "*", Drift = "*",  # Columnas para los coeficientes
AIC = "*", BIC = "*",
ME = NA, RMSE = NA, MAE = NA, MAPE = NA
))
}
# Ajustar el modelo ARIMA
arima_model <- tryCatch(auto.arima(series), error = function(e) NULL)
if (is.null(arima_model)) {
return(data.frame(
Serie = paste0("Serie ", i, " (Flare)"),
Model = "ARIMA",
AR1 = "*", MA1 = "*", SMA1 = "*", SMA2 = "*", SAR1 = "*", Intercepto = "*", Drift = "*",  # Columnas para los coeficientes
AIC = "*", BIC = "*",
ME = NA, RMSE = NA, MAE = NA, MAPE = NA
))
}
# Extraer los coeficientes del modelo ARIMA
arima_params <- coef(arima_model)
# Obtener AIC y BIC
aic_value <- AIC(arima_model)
bic_value <- BIC(arima_model)
# Extraer los coeficientes específicos (ar1, ma1, sma1, sma2, sar1, intercepto, drift)
ar1_coeff <- ifelse("ar1" %in% names(arima_params), round(arima_params["ar1"], 4), "*")
ar2_coeff <- ifelse("ar2" %in% names(arima_params), round(arima_params["ar2"], 4), "*")
ar3_coeff <- ifelse("ar3" %in% names(arima_params), round(arima_params["ar3"], 4), "*")
ma1_coeff <- ifelse("ma1" %in% names(arima_params), round(arima_params["ma1"], 4), "*")
sma1_coeff <- ifelse("sma1" %in% names(arima_params), round(arima_params["sma1"], 4), "*")
sma2_coeff <- ifelse("sma2" %in% names(arima_params), round(arima_params["sma2"], 4), "*")
sar1_coeff <- ifelse("sar1" %in% names(arima_params), round(arima_params["sar1"], 4), "*")
intercepto_coeff <- ifelse("intercept" %in% names(arima_params), round(arima_params["intercept"], 4), "*")
drift_coeff <- ifelse("drift" %in% names(arima_params), round(arima_params["drift"], 4), "*")
# Calcular las métricas de error
accuracy_metrics <- accuracy(arima_model)
data.frame(
Serie = paste0("Serie ", i, " (Flare)"),
AR1 = ar1_coeff,
AR2 = ar2_coeff,
AR3 = ar3_coeff,
MA1 = ma1_coeff,
SMA1 = sma1_coeff,
SMA2 = sma2_coeff,
SAR1 = sar1_coeff,
Intercepto = intercepto_coeff,
Drift = drift_coeff,
AIC = round(aic_value, 2),
BIC = round(bic_value, 2),
ME = round(accuracy_metrics[1, "ME"], 4),
RMSE = round(accuracy_metrics[1, "RMSE"], 4),
MAE = round(accuracy_metrics[1, "MAE"], 4),
MAPE = round(accuracy_metrics[1, "MAPE"], 4)
)
})
# Combinar resultados y ordenar por modelo
model_comparison_nf <- do.call(rbind, model_results_nf)
# Reemplazar NA con "*"
model_comparison_nf[is.na(model_comparison_nf)] <- "*"
# Crear la tabla en formato APA
model_table_nf <- model_comparison_nf %>%
gt() %>%
tab_header(
title = "Comparación de Modelos ARIMA - TOTUSJZ (Flare)"
) %>%
cols_label(
Serie = "Serie",
AR1 = "AR(1)",
AR2 = "AR(2)",
AR3 = "AR(3)",
MA1 = "MA(1)",
SMA1 = "SMA(1)",
SMA2 = "SMA(2)",
SAR1 = "SAR(1)",
Intercepto = "Intercepto",
Drift = "Drift",
AIC = "AIC",
BIC = "BIC",
ME = "Error Medio",
RMSE = "RMSE",
MAE = "MAE",
MAPE = "MAPE"
) %>%
fmt_number(
columns = c(AR1,AR2,AR3, MA1, SMA1, SMA2, SAR1, Intercepto, Drift, AIC, BIC, ME, RMSE, MAE, MAPE),
decimals = 4
)
# Imprimir la tabla
print(model_table_nf)
auto.arima(TOTUSJZ.f1.ts)
auto.arima(TOTUSJZ.f2.ts)
auto.arima(TOTUSJZ.f3.ts)
auto.arima(TOTUSJZ.f4.ts)
auto.arima(TOTUSJZ.f5.ts)
library(forecast)
library(gt)
# Función para ajustar el modelo ARIMA y extraer las métricas
model_results_nf <- lapply(1:5, function(i) {
# Definir el nombre de la serie
series_name <- paste0("TOTUSJZ.nf", i, ".ts")
series <- tryCatch(get(series_name), error = function(e) NULL)
if (is.null(series)) {
return(data.frame(
Serie = paste0("Serie ", i, " (No Flare)"),
Model = "ARIMA",
AR1 = "*", MA1 = "*", SMA1 = "*", SMA2 = "*", SAR1 = "*", Intercepto = "*", Drift = "*",  # Columnas para los coeficientes
AIC = "*", BIC = "*",
ME = NA, RMSE = NA, MAE = NA, MAPE = NA
))
}
# Ajustar el modelo ARIMA
arima_model <- tryCatch(auto.arima(series), error = function(e) NULL)
if (is.null(arima_model)) {
return(data.frame(
Serie = paste0("Serie ", i, " (No Flare)"),
Model = "ARIMA",
AR1 = "*", MA1 = "*", SMA1 = "*", SMA2 = "*", SAR1 = "*", Intercepto = "*", Drift = "*",  # Columnas para los coeficientes
AIC = "*", BIC = "*",
ME = NA, RMSE = NA, MAE = NA, MAPE = NA
))
}
# Extraer los coeficientes del modelo ARIMA
arima_params <- coef(arima_model)
# Obtener AIC y BIC
aic_value <- AIC(arima_model)
bic_value <- BIC(arima_model)
# Extraer los coeficientes específicos (ar1, ma1, sma1, sma2, sar1, intercepto, drift)
ar1_coeff <- ifelse("ar1" %in% names(arima_params), round(arima_params["ar1"], 4), "*")
ma1_coeff <- ifelse("ma1" %in% names(arima_params), round(arima_params["ma1"], 4), "*")
ma2_coeff <- ifelse("ma2" %in% names(arima_params), round(arima_params["ma2"], 4), "*")
sma1_coeff <- ifelse("sma1" %in% names(arima_params), round(arima_params["sma1"], 4), "*")
sma2_coeff <- ifelse("sma2" %in% names(arima_params), round(arima_params["sma2"], 4), "*")
sar1_coeff <- ifelse("sar1" %in% names(arima_params), round(arima_params["sar1"], 4), "*")
intercepto_coeff <- ifelse("intercept" %in% names(arima_params), round(arima_params["intercept"], 4), "*")
drift_coeff <- ifelse("drift" %in% names(arima_params), round(arima_params["drift"], 4), "*")
# Calcular las métricas de error
accuracy_metrics <- accuracy(arima_model)
data.frame(
Serie = paste0("Serie ", i, " (No Flare)"),
AR1 = ar1_coeff,
MA1 = ma1_coeff,
MA2 = ma2_coeff,
SMA1 = sma1_coeff,
SMA2 = sma2_coeff,
SAR1 = sar1_coeff,
Intercepto = intercepto_coeff,
Drift = drift_coeff,
AIC = round(aic_value, 2),
BIC = round(bic_value, 2),
ME = round(accuracy_metrics[1, "ME"], 4),
RMSE = round(accuracy_metrics[1, "RMSE"], 4),
MAE = round(accuracy_metrics[1, "MAE"], 4),
MAPE = round(accuracy_metrics[1, "MAPE"], 4)
)
})
# Combinar resultados y ordenar por modelo
model_comparison_nf <- do.call(rbind, model_results_nf)
# Reemplazar NA con "*"
model_comparison_nf[is.na(model_comparison_nf)] <- "*"
# Crear la tabla en formato APA
model_table_nf <- model_comparison_nf %>%
gt() %>%
tab_header(
title = "Comparación de Modelos ARIMA - TOTUSJZ (No Flare)"
) %>%
cols_label(
Serie = "Serie",
AR1 = "AR(1)",
MA1 = "MA(1)",
MA2 = "MA(2)",
SMA1 = "SMA(1)",
SMA2 = "SMA(2)",
SAR1 = "SAR(1)",
Intercepto = "Intercepto",
Drift = "Drift",
AIC = "AIC",
BIC = "BIC",
ME = "Error Medio",
RMSE = "RMSE",
MAE = "MAE",
MAPE = "MAPE"
) %>%
fmt_number(
columns = c(AR1, MA1,MA2, SMA1, SMA2, SAR1, Intercepto, Drift, AIC, BIC, ME, RMSE, MAE, MAPE),
decimals = 4
)
# Imprimir la tabla
print(model_table_nf)
auto.arima(TOTUSJZ.nf1.ts)
auto.arima(TOTUSJZ.nf2.ts)
auto.arima(TOTUSJZ.nf3.ts)
auto.arima(TOTUSJZ.nf4.ts)
auto.arima(TOTUSJZ.nf5.ts)
library(forecast)
library(gt)
# Función para ajustar el modelo ARIMA y extraer las métricas
model_results_nf <- lapply(1:5, function(i) {
# Definir el nombre de la serie
series_name <- paste0("ABSNJZH.f", i, ".ts")
series <- tryCatch(get(series_name), error = function(e) NULL)
if (is.null(series)) {
return(data.frame(
Serie = paste0("Serie ", i, " (Flare)"),
Model = "ARIMA",
AR1 = "*", MA1 = "*", SMA1 = "*", SMA2 = "*", SAR1 = "*", Intercepto = "*", Drift = "*",  # Columnas para los coeficientes
AIC = "*", BIC = "*",
ME = NA, RMSE = NA, MAE = NA, MAPE = NA
))
}
# Ajustar el modelo ARIMA
arima_model <- tryCatch(auto.arima(series), error = function(e) NULL)
if (is.null(arima_model)) {
return(data.frame(
Serie = paste0("Serie ", i, " (Flare)"),
Model = "ARIMA",
AR1 = "*", MA1 = "*", SMA1 = "*", SMA2 = "*", SAR1 = "*", Intercepto = "*", Drift = "*",  # Columnas para los coeficientes
AIC = "*", BIC = "*",
ME = NA, RMSE = NA, MAE = NA, MAPE = NA
))
}
# Extraer los coeficientes del modelo ARIMA
arima_params <- coef(arima_model)
# Obtener AIC y BIC
aic_value <- AIC(arima_model)
bic_value <- BIC(arima_model)
# Extraer los coeficientes específicos (ar1, ma1, sma1, sma2, sar1, intercepto, drift)
ar1_coeff <- ifelse("ar1" %in% names(arima_params), round(arima_params["ar1"], 4), "*")
ar2_coeff <- ifelse("ar2" %in% names(arima_params), round(arima_params["ar2"], 4), "*")
ma1_coeff <- ifelse("ma1" %in% names(arima_params), round(arima_params["ma1"], 4), "*")
ma2_coeff <- ifelse("ma2" %in% names(arima_params), round(arima_params["ma2"], 4), "*")
sma1_coeff <- ifelse("sma1" %in% names(arima_params), round(arima_params["sma1"], 4), "*")
sma2_coeff <- ifelse("sma2" %in% names(arima_params), round(arima_params["sma2"], 4), "*")
sar1_coeff <- ifelse("sar1" %in% names(arima_params), round(arima_params["sar1"], 4), "*")
intercepto_coeff <- ifelse("intercept" %in% names(arima_params), round(arima_params["intercept"], 4), "*")
drift_coeff <- ifelse("drift" %in% names(arima_params), round(arima_params["drift"], 4), "*")
# Calcular las métricas de error
accuracy_metrics <- accuracy(arima_model)
data.frame(
Serie = paste0("Serie ", i, " (Flare)"),
AR1 = ar1_coeff,
AR2 = ar2_coeff,
MA1 = ma1_coeff,
MA2 = ma2_coeff,
SMA1 = sma1_coeff,
SMA2 = sma2_coeff,
SAR1 = sar1_coeff,
Intercepto = intercepto_coeff,
Drift = drift_coeff,
AIC = round(aic_value, 2),
BIC = round(bic_value, 2),
ME = round(accuracy_metrics[1, "ME"], 4),
RMSE = round(accuracy_metrics[1, "RMSE"], 4),
MAE = round(accuracy_metrics[1, "MAE"], 4),
MAPE = round(accuracy_metrics[1, "MAPE"], 4)
)
})
# Combinar resultados y ordenar por modelo
model_comparison_nf <- do.call(rbind, model_results_nf)
# Reemplazar NA con "*"
model_comparison_nf[is.na(model_comparison_nf)] <- "*"
# Crear la tabla en formato APA
model_table_nf <- model_comparison_nf %>%
gt() %>%
tab_header(
title = "Comparación de Modelos ARIMA - ABSNJZH (Flare)"
) %>%
cols_label(
Serie = "Serie",
AR1 = "AR(1)",
AR2 = "AR(2)",
MA1 = "MA(1)",
MA2 = "MA(2)",
SMA1 = "SMA(1)",
SMA2 = "SMA(2)",
SAR1 = "SAR(1)",
Intercepto = "Intercepto",
Drift = "Drift",
AIC = "AIC",
BIC = "BIC",
ME = "Error Medio",
RMSE = "RMSE",
MAE = "MAE",
MAPE = "MAPE"
) %>%
fmt_number(
columns = c(AR1,AR2, MA1,MA2, SMA1, SMA2, SAR1, Intercepto, Drift, AIC, BIC, ME, RMSE, MAE, MAPE),
decimals = 4
)
# Imprimir la tabla
print(model_table_nf)
auto.arima(ABSNJZH.f1.ts)
auto.arima(ABSNJZH.f2.ts)
auto.arima(ABSNJZH.f3.ts)
auto.arima(ABSNJZH.f4.ts)
auto.arima(ABSNJZH.f5.ts)
library(forecast)
library(gt)
# Función para ajustar el modelo ARIMA y extraer las métricas
model_results_nf <- lapply(1:5, function(i) {
# Definir el nombre de la serie
series_name <- paste0("ABSNJZH.nf", i, ".ts")
series <- tryCatch(get(series_name), error = function(e) NULL)
if (is.null(series)) {
return(data.frame(
Serie = paste0("Serie ", i, " (No Flare)"),
Model = "ARIMA",
AR1 = "*", MA1 = "*", SMA1 = "*", SMA2 = "*", SAR1 = "*", Intercepto = "*", Drift = "*",  # Columnas para los coeficientes
AIC = "*", BIC = "*",
ME = NA, RMSE = NA, MAE = NA, MAPE = NA
))
}
# Ajustar el modelo ARIMA
arima_model <- tryCatch(auto.arima(series), error = function(e) NULL)
if (is.null(arima_model)) {
return(data.frame(
Serie = paste0("Serie ", i, " (No Flare)"),
Model = "ARIMA",
AR1 = "*", MA1 = "*", SMA1 = "*", SMA2 = "*", SAR1 = "*", Intercepto = "*", Drift = "*",  # Columnas para los coeficientes
AIC = "*", BIC = "*",
ME = NA, RMSE = NA, MAE = NA, MAPE = NA
))
}
# Extraer los coeficientes del modelo ARIMA
arima_params <- coef(arima_model)
# Obtener AIC y BIC
aic_value <- AIC(arima_model)
bic_value <- BIC(arima_model)
# Extraer los coeficientes específicos (ar1, ma1, sma1, sma2, sar1, intercepto, drift)
ar1_coeff <- ifelse("ar1" %in% names(arima_params), round(arima_params["ar1"], 4), "*")
ma1_coeff <- ifelse("ma1" %in% names(arima_params), round(arima_params["ma1"], 4), "*")
ma2_coeff <- ifelse("ma2" %in% names(arima_params), round(arima_params["ma2"], 4), "*")
sma1_coeff <- ifelse("sma1" %in% names(arima_params), round(arima_params["sma1"], 4), "*")
sma2_coeff <- ifelse("sma2" %in% names(arima_params), round(arima_params["sma2"], 4), "*")
sar1_coeff <- ifelse("sar1" %in% names(arima_params), round(arima_params["sar1"], 4), "*")
intercepto_coeff <- ifelse("intercept" %in% names(arima_params), round(arima_params["intercept"], 4), "*")
drift_coeff <- ifelse("drift" %in% names(arima_params), round(arima_params["drift"], 4), "*")
# Calcular las métricas de error
accuracy_metrics <- accuracy(arima_model)
data.frame(
Serie = paste0("Serie ", i, " (No Flare)"),
AR1 = ar1_coeff,
MA1 = ma1_coeff,
MA2 = ma2_coeff,
SMA1 = sma1_coeff,
SMA2 = sma2_coeff,
SAR1 = sar1_coeff,
Intercepto = intercepto_coeff,
Drift = drift_coeff,
AIC = round(aic_value, 2),
BIC = round(bic_value, 2),
ME = round(accuracy_metrics[1, "ME"], 4),
RMSE = round(accuracy_metrics[1, "RMSE"], 4),
MAE = round(accuracy_metrics[1, "MAE"], 4),
MAPE = round(accuracy_metrics[1, "MAPE"], 4)
)
})
# Combinar resultados y ordenar por modelo
model_comparison_nf <- do.call(rbind, model_results_nf)
# Reemplazar NA con "*"
model_comparison_nf[is.na(model_comparison_nf)] <- "*"
# Crear la tabla en formato APA
model_table_nf <- model_comparison_nf %>%
gt() %>%
tab_header(
title = "Comparación de Modelos ARIMA - ABSNJZH (No Flare)"
) %>%
cols_label(
Serie = "Serie",
AR1 = "AR(1)",
MA1 = "MA(1)",
MA2 = "MA(2)",
SMA1 = "SMA(1)",
SMA2 = "SMA(2)",
SAR1 = "SAR(1)",
Intercepto = "Intercepto",
Drift = "Drift",
AIC = "AIC",
BIC = "BIC",
ME = "Error Medio",
RMSE = "RMSE",
MAE = "MAE",
MAPE = "MAPE"
) %>%
fmt_number(
columns = c(AR1, MA1,MA2, SMA1, SMA2, SAR1, Intercepto, Drift, AIC, BIC, ME, RMSE, MAE, MAPE),
decimals = 4
)
# Imprimir la tabla
print(model_table_nf)
auto.arima(ABSNJZH.nf1.ts)
auto.arima(ABSNJZH.nf2.ts)
auto.arima(ABSNJZH.nf3.ts)
auto.arima(ABSNJZH.nf4.ts)
auto.arima(ABSNJZH.nf5.ts)
